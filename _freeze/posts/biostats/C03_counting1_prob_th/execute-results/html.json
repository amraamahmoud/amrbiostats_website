{
  "hash": "5c66bb76c067aa84e44653cf7a677900",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Combinatorics 1 - Permutations\"\nimage: \"/images/biostats.jpg\"\ndate: \"2024-12-15\"\nformat: \n  html: \n    fig-align: center\n    page-layout: article\n    toc: true\n    toc-depth: 5\n    toc-expand: true\n    lightbox: false\nfilters: \n  - highlight-text\ncrossref: \n  custom: \n    - kind: float\n      reference-prefix: \"Example M.10.\"\n      key: tabset\n      space-before-numbering: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Background\n\n-   In the previous section, we discussed the classical approach to assign probabilities to events, where counting the number of favorable outcomes and the total number of outcomes is crucial.\n\n-   When the number of outcomes is small, counting is straightforward, however, when the number of outcomes is large, counting can be challenging and tedious.\n\n-   Therefore, we use combinatorics to provide a systematic way for counting.\n\n-   **Combinatorics** is the branch of mathematics that deals with counting, arranging, and combining objects within finite sets.\n\n## Motivational example {#motv_ex}\n\n-   Suppose that we have a set of $4$ colored balls in a box: $2$ [red]{fg=\"white\" bg=\"red\"} balls $(R_1, R_2)$, $1$ [blue]{fg=\"white\" bg=\"#0171c3\"} ball $(B)$, and $1$ [green]{fg=\"white\" bg=\"green\"} ball $(G)$.\n\n-   If we want to draw two balls from the box, then in how many different ways can we do this?\n\n-   After drawing the first ball and before drawing the second ball, an important question to ask is whether we should put the first ball back in the box or not:\n\n    -   If we decide to put it back, then it is said that we draw **with replacement** (the ball which is drawn once is available for the next draw).\n\n    -   If we decide not to put it back, then it is said that we draw **without replacement** (if a ball is drawn once, it is not available for the next draw).\n\n-   If we draw **without replacement**, then there are $12$ ways to draw $2$ balls as follows:\n\n    ::::::::: grid\n    ::: g-col-1\n    :::\n\n    ::: g-col-2\n    $1.\\ R_1, R_2$\n\n    $2.\\ R_1, B$\n\n    $3.\\ R_1, G$\n\n    $4.\\ R_2, R_1$\n    :::\n\n    ::: g-col-2\n    :::\n\n    ::: g-col-2\n    $5.\\ R_2, B$\n\n    $6.\\ R_2, G$\n\n    $7.\\ B, R_1$\n\n    $8.\\ B, R_2$\n    :::\n\n    ::: g-col-2\n    :::\n\n    ::: g-col-2\n    $9.\\ B, G$\n\n    $10.\\ G, R_1$\n\n    $11.\\ G, R_2$\n\n    $12.\\ G, B$\n    :::\n    :::::::::\n\n-   A second question to ask is whether the **order** of the balls matters or not:\n\n    [{{< iconify bi:1-circle-fill size=20px fill=blue >}}]{style=\"color: dodgerblue\"} **If the order matters**:\n\n    -   The combination of $(G, B)$, for example, is different from the combination of $(B, G)$.\n\n    -   Considering the order, there are $12$ ways to draw two balls without replacement as shown above.\n\n    [{{< iconify bi:2-circle-fill size=20px fill=blue >}}]{style=\"color: dodgerblue\"} **If the order does not matter**:\n\n    -   The combination of $(G, B)$ is the same as the combination of $(B, G)$ as both result in a draw of $1$ [green]{fg=\"white\" bg=\"green\"} and $1$ [blue]{fg=\"white\" bg=\"#0171c3\"} ball.\n\n    -   Without considering the order, there are only $6$ ways to draw two balls without replacement as shown below (distinct combinations are highlighted and listed in the left column, while the duplicates are struck through and listed in the right column):\n\n        ::::::: grid\n        ::: g-col-2\n        :::\n\n        ::: g-col-3\n        [$1.\\ R_1, R_2$]{bg-colour=\"#bde0fe\"}\n\n        [$2.\\ R_1, B$]{bg-colour=\"#bde0fe\"}\n\n        [$3.\\ R_1, G$]{bg-colour=\"#bde0fe\"}\n\n        [$4.\\ R_2, B$]{bg-colour=\"#bde0fe\"}\n\n        [$5.\\ R_2, G$]{bg-colour=\"#bde0fe\"}\n\n        [$6.\\ B, G$]{bg-colour=\"#bde0fe\"}\n        :::\n\n        ::: g-col-2\n        :::\n\n        ::: g-col-3\n        $7.\\ \\cancel{R_2, R_1}$\n\n        $8.\\ \\cancel{B, R_1}$\n\n        $9.\\ \\cancel{G, R_1}$\n\n        $10.\\ \\cancel{B, R_2}$\n\n        $11.\\ \\cancel{G, R_2}$\n\n        $12. \\cancel{G, B}$\n        :::\n        :::::::\n\n    [{{< iconify bi:3-circle-fill size=20px fill=blue >}}]{style=\"color: dodgerblue\"} If the order does not matter and similar items are **indistinguishable**:\n\n    -   This means the two red balls are **indistinguishable** making making the distinction between $R_1$ and $R_2$ irrelevant.\n\n    -   In this case, there are $4$ ways to draw the two balls as shown below:\n\n        ::::::: grid\n        ::: g-col-3\n        $1.\\ R, R$\n        :::\n\n        ::: g-col-3\n        $2.\\ R, B$\n        :::\n\n        ::: g-col-3\n        $3.\\ R, G$\n        :::\n\n        ::: g-col-3\n        $4.\\ B, G$\n        :::\n        :::::::\n\n-   Therefore, replacement, order, and distinguishability are important factors to be considered when counting the number of ways to arrange objects from a set.\n\n## Multiplication principle\n\n-   Assume that we are performing different random experiments, and each experiment has $n_1, n_2, \\ldots, n_k$ possible outcomes, respectively.\n\n-   The multiplication principle states that the total number of outcomes for the combined experiments is the product of the number of outcomes for each individual experiment:\n\n$$\n\\text{Total number of outcomes} = n_1 \\times n_2 \\times \\ldots \\times n_k\n$$\n\n::: panel-tabset\n## Example C.3.1 {{< iconify ic:round-menu-book size=21px >}}\n\n-   A company requires its employees to create a password for their computer accounts. The password must follow these rules:\n\n    -   It must be exactly $8$ characters long.\n\n    -   The first character must be a special character (from a set of $7$ allowed special characters).\n\n    -   The second character must be a digit (from $0$ to $9$).\n\n    -   The remaining $6$ characters can be any combination of letters (case-sensitive).\n\n[{{< iconify bi:1-circle-fill size=20px fill=blue >}}]{style=\"color: #ba181b\"} How many possible passwords can be created following these rules?\n\n-   **Answer**:\n\n    -   The first character can be selected in $7$ ways.\n\n    -   The second character can be selected in $10$ ways.\n\n    -   The remaining $6$ characters can be selected in $52$ ways each (because the character is case-sensitive, and there are $26$ uppercase and $26$ lowercase letters in the English alphabet).\n\n    -   Therefore, the total number of possible passwords is:\n\n    $$\n    7 \\times 10 \\times 52 \\times 52 \\times 52 \\times 52 \\times 52 \\times 52 = \n    $$\n\n    $$\n    7 \\times 10 \\times 52^6 = 1,383,942,676,480 \n    $$\n:::\n\n## Permutations\n\n-   A permutation is an arrangement of objects in a **specific order (i.e., order matters)**.\n\n-   For a set of $n$ objects, each **unique arrangement** of $r$ objects is called a permutation, where $r \\leq n$.\n\n### Permutations of distinguishable objects\n\n#### Without replacement\n\n-   Suppose we have a set of three **distinguishable** balls, $1$ [red]{fg=\"white\" bg=\"red\"}, $1$ [blue]{fg=\"white\" bg=\"#0171c3\"}, and $1$ [green]{fg=\"white\" bg=\"green\"}.\n\n-   We are interested in finding the number of unique permutations (i.e., ordered arrangements) of the three balls without replacement.\n\n    ![](/images/perm_no_repl1.jpg){width=\"481\"}\n\n-   As shown in the figure, there are $6$ unique ways to arrange the three balls.\n\n-   For the first ball, there are $3$ available choices.\n\n-   For the second ball, there are $2$ choices left (the ball drawn in the first run is not available for the second slot).\n\n-   For the third ball, there is only $1$ choice left (the $2$ balls drawn in the first and second runs are not available for the third slot).\n\n-   Using the multiplication principle, the total number of unique permutations is calculated by multiplying the number of choices for each slot: $3 \\times 2 \\times 1 = 6$.\n\n##### Formula\n\n-   The above rule can be generalized as follows:\n\n    [{{< iconify emojione-monotone:letter-a size=20px fill=blue >}}]{style=\"color: dodgerblue\"} When arranging $n$ objects without replacement:\n\n    -   The number of unique permutations of $n$ distinguishable objects is given as:\n\n        $$\n        n \\times (n-1) \\times (n-2) \\times \\ldots \\times 3 \\times 2 \\times 1 = n!\n        $$\n\n    -   The term $n!$ is read as $n$ factorial and is defined as the product of all positive integers from $1$ up to $n$.\n\n    -   This can be written in mathematical notation as:\n\n    $$\n    _nP_n=n\\times (n-1)\\times (n-2) \\times \\ldots \\times 1=n!\n    $$\n\n    -   $_nP_n$ is read as permutation of $n$ objects taken $n$ at a time, where the first $n$ is the total number of objects and the second $n$ is the number of objects to be arranged.\n\n    [{{< iconify emojione-monotone:letter-b size=20px fill=blue >}}]{style=\"color: dodgerblue\"} When arranging $r$ objects selected from $n$ objects without replacement, where $r < n$:\n\n    -   The number of unique permutations of $r$ distinguishable objects is given as:\n\n        $$\n        n \\times (n-1) \\times (n-2) \\times \\ldots \\times [n-(r-1)]\n        $$\n\n    -   There are $n$ choices for the first selection, $(n-1)$ choices for the second selection, and so forth until the last selection that always has $[n-(r-1)]$ choices left.\n\n    -   This can be written in mathematical notation as:\n\n    $$\n    _nP_r=n\\times (n-1)\\times (n-2) \\times \\ldots \\times [n-(r-1)] = \\frac{n!}{(n-r)!}\n    $$\n\n    ::: {.callout-note style=\"color: #0466c8;\" title=\"Proof\"}\n    $n\\times (n-1)\\times (n-2) \\times \\ldots \\times [n-(r-1)] =$\n\n    $n\\times (n-1)\\times (n-2) \\times \\ldots \\times (n-r+1) \\xRightarrow{\\text{multiply by}}$\n\n    $\\frac{(n-r) \\times (n-r-1) \\times \\ldots \\times 2 \\times 1}{(n-r) \\times (n-r-1) \\times \\ldots \\times 2 \\times 1} \\xRightarrow{\\text{this becomes}}$\n\n    $\\frac{n\\times (n-1)\\times (n-2) \\times \\ldots \\times (n-r+1) \\times (n-r) \\times (n-r-1) \\times \\ldots \\times 2 \\times 1}{(n-r) \\times (n-r-1) \\times \\ldots \\times 2 \\times 1}\\xRightarrow{\\text{reduces to}}\\displaystyle \\frac{n!}{(n-r)!}$\n    :::\n\n    -   $_nP_r$ is read as permutation of $n$ objects taken $r$ at a time, where the first $n$ is the total number of objects and $r$ is the number of objects to be arranged.\n\n::: {.callout-note style=\"color: #0466c8;\"}\n-   When $r = n$, the formula $\\displaystyle \\frac{n!}{(n-r)!}$ reduces to $n!$.\n\n-   $0! = 1$ by definition or convention.\n:::\n\n##### Calculation in R\n\n-   The factorial of a number can be calculated in `R` using the `factorial()` function.\n\n-   $4!$:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    factorial(4)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 24\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n-   $5!$:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    factorial(5)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 120\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n-   $0!$:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    factorial(0)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 1\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n::: panel-tabset\n## Example C.3.2 {{< iconify ic:round-menu-book size=21px >}}\n\n[{{< iconify bi:1-circle-fill size=20px >}}]{style=\"color: #e63946\"} In how many unique ways can we arrange the letters from **A** to **F** without replacement?\n\n[{{< iconify bi:2-circle-fill size=20px >}}]{style=\"color: #e63946\"} In how many unique ways can we select $4$ letters from **A** to **F** without replacement?\n\n**Answer**:\n\nThere are a total of $6$ **distinguishable** letters.\n\n[{{< iconify bi:1-circle-fill size=20px >}}]{style=\"color: dodgerblue\"} The unique permutations of $6$ letters taken $6$ at a time is $_6P_6 = 6! = 720$\n\n[{{< iconify bi:2-circle-fill size=20px >}}]{style=\"color: dodgerblue\"} The unique permutations of $6$ letters taken $4$ at a time is $_6P_4 = \\displaystyle \\frac{6!}{(6-4)!} = 360$\n:::\n\n### Permutations with replacement\n\n-   Consider the example of the three balls ($1$ [red]{fg=\"white\" bg=\"red\"}, $1$ [red]{fg=\"white\" bg=\"blue\"}, and $1$ [red]{fg=\"white\" bg=\"green\"}) that we discussed above.\n\n-   Now, we want to arrange the three balls but with **replacement**.\n\n-   This means that after each draw, the ball is put back in the box and is available for the next draw.\n\n-   For the first slot, there are $3$ choices.\n\n-   For the second slot, there are $3$ choices because the first ball is put back in the box and is available for the next draw.\n\n-   For the third slot, there are $3$ choices as well.\n\n-   So, the total number of unique permutations with replacement is $3 \\times 3 \\times 3 = 27$.\n\n#### Formula\n\n-   This rule can be generalized as follows:\n\n    -   The number of unique permutations of $n$ **distinguishable** objects **with replacement** is given as:\n\n        $$\n        n^r\n        $$\n\n    -   $n$ is the total number of objects and $r$ is the number of objects to be arranged and $r \\leq n$.\n\n::: panel-tabset\n## Example C.3.3 {{< iconify ic:round-menu-book size=21px >}}\n\n[{{< iconify bi:1-circle-fill size=20px >}}]{style=\"color: #e63946\"} In how many unique ways can you arrange the letters from **A** to **F** with replacement?\n\n[{{< iconify bi:2-circle-fill size=20px >}}]{style=\"color: #e63946\"} In how many unique ways can you select $4$ letters from **A** to **F** with replacement?\n\n**Answer**\n\n[{{< iconify bi:1-circle-fill size=20px >}}]{style=\"color: dodgerblue\"} We can use the formula $n^r$, where $n=6$ and $r=6$. So, the number of permutations with replacement is $6^6 = 46,656$\n\n[{{< iconify bi:2-circle-fill size=20px >}}]{style=\"color: dodgerblue\"} We can use the formula $n^r$, where $n=6$ and $r=4$. So, the number of permutations with replacement is $6^4 = 1,296$\n:::\n\n### Permutations of indistinguishable objects {#perm_indist}\n\n[{{< iconify emojione-monotone:letter-a size=20px fill=blue >}}]{style=\"color: dodgerblue\"} **Single group of indistinguishable objects**:\n\n-   Suppose we have a set of $3$ **indistinguishable** [red]{fg=\"white\" bg=\"red\"} balls.\n\n-   We are interested in finding the number of ways to arrange the $3$ balls.\n\n    ![](/images/perm_no_repl2.jpg){width=\"481\"}\n\n-   As shown in the figure, there is only $1$ way to arrange the three balls because they are indistinguishable and can be swapped without changing the arrangement (i.e., swapping positions does not create any new unique arrangement).\n\n-   There is only $1$ way to arrange the three indistinguishable balls regardless the draw is with or without replacement.\n\n[{{< iconify emojione-monotone:letter-b size=20px fill=blue >}}]{style=\"color: dodgerblue\"} **Multiple distinguishable groups with indistinguishable objects**:\n\n-   There are some scenarios, where we have multiple distinguishable groups but the objects within each group are indistinguishable.\n\n-   For example, we may be interested in finding the number of ordered arrangements (permutations) that can be formed from the letters in the word **STATISTICS**?\n\n-   The word [**STATISTICS**]{color=\"#0171c3\"} has $10$ letters, where the letter [**S**]{.underline} appears $3$ times, the letter [**T**]{.underline} appears $3$ times, the letter [**I**]{.underline} appears $2$ times, the letter [**A**]{.underline} appears $1$ time, and the letter [**C**]{.underline} appears $1$ time (i.e., there are $5$ distinct letter groups but the letters within each group are indistinguishable).\n\n-   If all letters were distinct, the number of permutations without replacement would be $10!$.\n\n-   However, since some letters are repeated, we need to adjust the number of permutations because swapping the positions of the repeated letters does not create new unique arrangements. For instance, when the $3$ [**S**'s]{.underline} fill positions $4$, $7$, and $9$ in a permutation, it does not matter which [**S**]{.underline} is in which position.\n\n-   This adjustment can be done by dividing the total number of permutations if all letters were distinct by the number of ways the indistinguishable letters can be swapped.\n\n-   For the $3$ [**S**'s]{.underline}, there are $3!$ ways to swap them without changing the arrangement, for the letter [**I**]{.underline}, there are $2!$ ways to swap them, and so forth.\n\n-   Therefore, the number of unique permutations that can be formed from the letters in the word [**STATISTICS**]{color=\"#0171c3\"} is:\n\n    $$\n    \\frac{10!}{3! \\times 3! \\times 2! \\times 1! \\times 1!} = 50,400\n    $$\n\n-   **Formula**:\n\n    -   To generalize the above rule, assume we have $k$ distinct groups of objects, where the groups contain $n_1, n_2, \\ldots, n_k$ indistinguishable objects and the total number of objects $n = n_1 + n_2 + \\ldots + n_k$.\n\n    -   The number of unique permutations is given as:\n\n        $$\n        \\frac{n!}{n_1! \\times n_2! \\times \\ldots \\times n_k!}\n        $$\n\n    ::: {.callout-note style=\"color: #0466c8;\"}\n    -   This formula can also be derived using **combinations** that will be discussed in the next section.\n    :::\n\n::: panel-tabset\n## [Exercise C.3.1 {{< iconify fluent:chat-bubbles-question-20-filled size=21px >}}]{style=\"color: #ba181b\"}\n\nHow many permutations can be formed from the letters in the word **BANANA**?\n\nThe answer is <input class='webex-solveme nospaces' size='2' data-answer='[\"60\"]'/> permutations.\n:::\n\n## References\n\n-   Heumann, C., Schomaker, M., and Shalabh (2022). Introduction to Statistics and Data Analysis: With Exercises, Solutions and Applications in R. Springer\n\n-   Daniel, W. W. and Cross, C. L. (2013). Biostatistics: A Foundation for Analysis in the Health Sciences, Tenth edition. Wiley\n\n-   Penn State University. STAT 414: Introduction to Probability Theory. Online Statistics Education. Retrieved December 02, 2024, from <https://online.stat.psu.edu/stat414>\n\n<br>\n\n## Add your comments\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}