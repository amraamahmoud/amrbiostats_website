{
  "hash": "e381934a52bd7268e9a91d9bdba1ebbb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Probabilty Theory\"\nimage: \"/images/biostats.jpg\"\ndate: \"2024-11-20\"\nformat: \n  html: \n    fig-align: center\n    page-layout: article\n    toc: true\n    toc-depth: 5\n    toc-expand: true\n    lightbox: false\nfilters: \n  - highlight-text\ncrossref: \n  custom: \n    - kind: float\n      reference-prefix: \"Example M.10.\"\n      key: tabset\n      space-before-numbering: false\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Background\n\n-   Combinatorics is a branch of mathematics that deals with counting, arranging, and combining objects within finite sets.\n\n-   Suppose that we have a set of four colored balls in a box: two [red]{fg=\"white\" bg=\"red\"} balls $(R_1, R_2)$, one [blue]{fg=\"white\" bg=\"#0171c3\"} ball $(B)$, and one [green]{fg=\"white\" bg=\"green\"} ball $(G)$.\n\n-   If we want to draw two balls from the box, then how many different ways can we do this?\n\n-   Assume we draw the first ball and it is [red]{fg=\"white\" bg=\"red\"}.\n\n-   Before we draw the second ball, a question is whether we should put the red ball back in the box or not:\n\n    -   If we decide to put it back, then it is said that we draw **with replacement**.\n\n    -   If we decide not to put it back, then it is said that we draw **without replacement**.\n\n-   If we draw without replacement, then there are $12$ ways to draw two balls as follows:\n\n    |                 |               |                |\n    |-----------------|---------------|----------------|\n    | $1.$ $R_1, R_2$ | $5.$ $R_2, B$ | $9$. $B, G$    |\n    | $2.$ $R_1, B$   | $6.$ $R_2, G$ | $10.$ $G, R_1$ |\n    | $3.$ $R_1, G$   | $7.$ $B, R_1$ | $11.$ $G, R_2$ |\n    | $4.$ $R_2, R_1$ | $8.$ $B, R_2$ | $12.$ $G, B$   |\n\n-   A second question is whether the order of the balls matters or not:\n\n    -   If the order matters:\n\n        -   The combination of $(G, B)$, for example, is different from the combination of $(B, G)$.\n\n        -   Considering the order, there are $12$ ways to draw two balls without replacement as shown above.\n\n    -   If the order does not matter:\n\n        -   The combination of ${G, B}$ is the same as the combination of ${B, G}$ as both results in a draw of one green and one blue ball.\n\n        -   Without considering the order, there are only $6$ ways to draw two balls without replacement as shown below (the duplicates are struck through, while distinct combinations are highlighted):\n\n    |  |  |  |\n    |-------------------------|------------------|------------------------------|\n    | [$1.$ $R_1, R_2$]{bg-colour=\"#bde0fe\"} | [$5.$ $R_2, B$]{bg-colour=\"#bde0fe\"} | [$9$. $B, G$]{bg-colour=\"#bde0fe\"} |\n    | [$2.$ $R_1, B$]{bg-colour=\"#bde0fe\"} | [$6.$ $R_2, G$]{bg-colour=\"#bde0fe\"} | $10.$ $\\cancel{G, R_1}$ |\n    | [$3.$ $R_1, G$]{bg-colour=\"#bde0fe\"} | $7.$ $\\cancel{B, R_1}$ | $11.$ $\\cancel{G, R_2}$ |\n    | $4.$ $\\cancel{R_2, R_1}$ | $8.$ $\\cancel{B, R_2}$ | $12.$ $\\cancel{G, B}$ |\n\n    -   If the order does not matters and similar items are indistinguishable (i.e., the two red balls are indistinguishable making no sense of denoting the two balls as $R_1$ and $R_2$):\n\n        -   In this case, there are $4$ ways to draw the two balls as shown below:\n\n    |             |             |             |             |\n    |-------------|-------------|-------------|-------------|\n    | $1.$ $R, R$ | $2.$ $R, B$ | $3.$ $R, G$ | $4.$ $B, G$ |\n\n-   When the number of the finite set we are selecting from is large, this counting can be quite challenging and tedious.\n\n-   Therefore, we use combinatorics to provide a systematic way to count, arrange, and combine objects within finite sets.\n\n## Permutations\n\n-   A permutation is an arrangement of objects in a specific order.\n\n-   For a set of $n$ objects, each unique arrangement of $r$ objects is called a permutation, where $r \\leq n$.\n\n### Permutations without replacement\n\n#### Rational\n\n-   Suppose we have a set of three distinguishable balls, one [red]{fg=\"white\" bg=\"red\"}, one [blue]{fg=\"white\" bg=\"#0171c3\"}, and one [green]{fg=\"white\" bg=\"green\"}.\n\n-   We are interested in finding the number of ways to arrange the three balls.\n\n    ![](/images/perm_no_repl.jpg){width=\"481\"}\n\n-   As shown in the figure, there are $6$ unique ways to arrange the three balls. \n\n-   For the first ball, there are $3$ available choices.\n\n-   For the second ball, there are $2$ choices left.\n\n-   For the third ball, there is only $1$ choice left.\n\n-   Therefore, the total number of unique arrangements (permutations) is calculated by multiplying the number of choices for each ball: $3 \\times 2 \\times 1 = 6$.\n\n#### Formula\n-  The number of permutations of $n$ **distinguishable** objects **without replacement** is given as $n!$.\n\n-   The term $n!$ is read as `$n$ factorial` and is defined as the product of all positive integers from $1$ up to $n$.\n\n    $$\n    n! = n \\times (n-1) \\times (n-2) \\times \\ldots \\times 3 \\times 2 \\times 1\n    $$\n\n-   $0! = 1$ by definition or convention.\n\n-   Examples:\n\n    -   $4! = 4 \\times 3 \\times 2 \\times 1 = 24$.\n\n    -   $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$.\n    \n#### Calculation in R\n\n-   The factorial of a number can be calculated in R using the `factorial()` function.\n\n-   $4!$:\n    \n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    factorial(4)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 24\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n    \n-   $5!$:\n    \n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    factorial(5)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 120\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n    \n-   $0!$:\n    \n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    factorial(0)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 1\n    ```\n    \n    \n    :::\n    :::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}